#!/bin/bash
#set -x
# SHocker - A basic container runtime written in Bash shell

# Define colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to pull a Docker image and create a container
create_container_from_image() {
  local image=$1
  local tag="latest"

  # Check if the image includes a tag; if not, default to "latest"
  if [[ "$image" == *":"* ]]; then
    tag="${image##*:}"
    image="${image%%:*}"
  fi

  local container_id="$(echo $image)-$(echo $tag)_$(date +%s%N)"
  local container_dir="/var/shocker/containers/$container_id"
  local registry="https://registry-1.docker.io"

  echo "Creating container $container_id from image $image:$tag..."

  mkdir -p "$container_dir/rootfs"
  mkdir -p "$container_dir/workspace"
  mkdir -p "$container_dir/layers"

  # Fetch token for Docker Hub
  local token=$(curl -s "https://auth.docker.io/token?service=registry.docker.io&scope=repository:library/$image:pull" | jq -r .token)
  if [[ -z "$token" ]]; then
    echo "Error: Unable to retrieve authentication token."
    exit 1
  fi

  # Fetch manifest or image index
  local manifest=$(curl -s -H "Authorization: Bearer $token" -H "Accept: application/vnd.docker.distribution.manifest.v2+json, application/vnd.docker.distribution.manifest.v1+json, application/vnd.docker.distribution.manifest.list.v2+json" "$registry/v2/library/$image/manifests/$tag")
  if [[ -z "$manifest" ]]; then
    echo "Error: Unable to retrieve image manifest."
    exit 1
  fi

  # Check if manifest is an image index (manifest list)
  local media_type=$(echo "$manifest" | jq -r .mediaType)
  if [[ "$media_type" == "application/vnd.docker.distribution.manifest.list.v2+json" ]]; then
    # Find the manifest for the current architecture and OS (e.g., amd64/linux)
    local target_arch="amd64"
    local target_os="linux"
    local manifest_digest=$(echo "$manifest" | jq -r --arg arch "$target_arch" --arg os "$target_os" '.manifests[] | select(.platform.architecture == $arch and .platform.os == $os) | .digest')
    if [[ -z "$manifest_digest" ]]; then
      echo "Error: No suitable image found for the architecture $target_arch and OS $target_os."
      exit 1
    fi
    # Fetch the actual manifest
    manifest=$(curl -s -H "Authorization: Bearer $token" -H "Accept: application/vnd.docker.distribution.manifest.v2+json, application/vnd.docker.distribution.manifest.v1+json" "$registry/v2/library/$image/manifests/$manifest_digest")
  fi

  # Extract layers from the manifest
  local layers=$(echo "$manifest" | jq -r '.layers[]?.digest // empty')
  if [[ -z "$layers" ]]; then
    layers=$(echo "$manifest" | jq -r '.fsLayers[].blobSum // empty')
  fi

  if [[ -z "$layers" ]]; then
    echo "Error: No layers found in the manifest."
    exit 1
  fi

  for layer in $layers; do
    local clean_layer=$(echo $layer | sed 's/^sha256://')
    echo "Downloading and extracting layer $clean_layer..."

    curl -sL -H "Authorization: Bearer $token" "$registry/v2/library/$image/blobs/$layer" -o "$container_dir/layers/$clean_layer.tar"
    if [[ $? -ne 0 ]]; then
      echo "Error: Failed to download layer $layer."
      exit 1
    fi

    sudo tar -xf "$container_dir/layers/$clean_layer.tar" -C "$container_dir/rootfs"
    if [[ $? -ne 0 ]]; then
      echo "Error: Failed to extract layer $layer."
      exit 1
    fi

    rm "$container_dir/layers/$clean_layer.tar"
  done

  echo -e "${GREEN}Container created with ID: $container_id${NC}"
  echo "Root filesystem path: $container_dir/rootfs"
  echo "Workspace path: $container_dir/workspace"
}


# Function to run the container
run_container() {
  local container_id=$1
  shift
  local command=("$@")

  local container_dir="/var/shocker/containers/$container_id"
  local rootfs_dir="$container_dir/rootfs"
  local workspace_dir="$container_dir/workspace"

  if [ ! -d "$rootfs_dir" ]; then
    echo "Error: Root filesystem not found for container $container_id."
    exit 1
  fi

  if [ ! -d "$workspace_dir" ]; then
    echo "Warning: Workspace directory not found, creating $workspace_dir."
    mkdir -p "$workspace_dir"
  fi

  echo "Running command in container $container_id..."

  # Ensure the workspace directory exists inside the root filesystem
  sudo mkdir -p "$rootfs_dir/workspace"

  # Bind mount the workspace directory inside the root filesystem
  sudo mount --bind "$workspace_dir" "$rootfs_dir/workspace"

  # Debug output
#  echo "Debug: Full command being passed to chroot:"
#  echo "sudo chroot $rootfs_dir ${command[@]}"

  # Run the command inside the container's root filesystem with chroot
  sudo chroot "$rootfs_dir" "${command[@]}"

  # Unmount the workspace directory after execution
  sudo umount "$rootfs_dir/workspace"
}


# Function to list all containers
list_containers() {
    local container_base_dir="/var/shocker/containers"
    echo "Listing all containers:"
    echo "ID                                | Image      | Created"
    echo "----------------------------------|------------|-----------------------"
    for container_dir in "$container_base_dir"/*; do
        if [ -d "$container_dir" ]; then
            local container_id=$(basename "$container_dir")
            local image_file="$container_dir/image"
            local image="Unknown"
            if [ -f "$image_file" ]; then
                image=$(cat "$image_file")
            fi
            local created=$(stat -c %y "$container_dir" 2>/dev/null)
            echo "$container_id | $image | $created"
        fi
    done
}


# Function to delete a container
delete_container() {
  local container_id=$1
  local container_dir="/var/shocker/containers/$container_id"

  if [[ -d "$container_dir" ]]; then
    echo "Deleting container $container_id..."
    sudo rm -rf "$container_dir"
    echo "Container $container_id deleted."
  else
    echo "Container $container_id not found."
  fi
}

# Function to prune all containers
prune_containers() {
  echo "WARNING: This action will delete ALL containers."
  echo "This operation cannot be undone."
  echo -e -n "${YELLOW}Are you sure you want to proceed? (yes/no): ${NC}"
  read confirmation

  if [[ "$confirmation" != "yes" ]]; then
    echo "Operation cancelled."
    return
  fi

  echo "Proceeding with container deletion..."

  local containers=$(./shocker list | tail -n +4 | awk '{print $1}')
  local count=0

  for container_id in $containers; do
    echo "Deleting container $container_id..."
    ./shocker delete $container_id
    ((count++))
  done

  echo -e "${GREEN}Prune operation complete. $count container(s) deleted.${NC}"
}


# Function to print help information
print_help() {
    cat << EOF
SHocker - A lightweight container runtime

Usage: ./shocker <command> [options]

Commands:
  create <image>           Create a new container from a Docker image
  run <container_id> <cmd> Run a command in an existing container
  list                     List all containers
  delete <container_id>    Delete a specific container
  prune                    Remove all containers (with confirmation)

Examples:
  Create a new container:
    ./shocker create debian:latest

  Run a command in a container:
    ./shocker run 1234567890 /bin/bash -c "echo Hello from SHocker."

  List all containers:
    ./shocker list

  Delete a specific container:
    ./shocker delete 1234567890

  Remove all containers:
    ./shocker prune

For more information, visit: https://github.com/beehivesystems/shocker
EOF
}


# Main script logic
case $1 in
  create)
    shift
    create_container_from_image $@
    ;;
  run)
    shift
#    echo "Debug: Arguments being passed to run_container: "
#    echo "$@"
    run_container "$@"
    ;;
  list)
    shift
    list_containers
    ;;
  delete)
    shift
    delete_container $1
    ;;
  prune)
    shift
    prune_containers
    ;;
  help|--help|-h)
    print_help
    ;;
  *)
    echo "Error: Unknown command '$1'"
    echo "Run './shocker help' for usage information."
    exit 1
    ;;
esac
